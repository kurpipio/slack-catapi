---
AWSTemplateFormatVersion: '2010-09-09'
Description: Api for finding url of random internet cat
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Join ['', ['https://', !Ref CatAPI, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/PROD/cat']]
Resources:
  ApiDeployment:
    DependsOn:
      - GetRandomCat
    Properties:
      RestApiId: !Ref CatAPI
      StageName: PROD
    Type: AWS::ApiGateway::Deployment
  ApiGatewayAccount:
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn
    Type: AWS::ApiGateway::Account
  ApiGatewayCloudWatchLogsRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: ApiGatewayLogsPolicy
      RoleName: GatewayCloudWatchRole
    Type: AWS::IAM::Role
  Cat:
    Properties:
      ParentId: !GetAtt CatAPI.RootResourceId
      PathPart: cat
      RestApiId: !Ref CatAPI
    Type: AWS::ApiGateway::Resource
  CatAPI:
    Properties:
      Description: API for finding random internet cats
      Name: CatAPI
    Type: AWS::ApiGateway::RestApi
  GetRandomCat:
    DependsOn: LambdaInvokePermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/x-www-form-urlencoded: |
            ## convert HTML POST data or HTTP GET query string to JSON

            ## get the raw post data from the AWS built-in variable and give it a nicer name
            #if ($context.httpMethod == "POST")
             #set($rawAPIData = $input.path(''$''))
            #elseif ($context.httpMethod == "GET")
             #set($rawAPIData = $input.params().querystring)
             #set($rawAPIData = $rawAPIData.toString())
             #set($rawAPIDataLength = $rawAPIData.length() - 1)
             #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))
             #set($rawAPIData = $rawAPIData.replace(", ", "&"))
            #else
             #set($rawAPIData = "")
            #end

            ## first we get the number of "&" in the string, this tells us if there is more than one key value pair
            #set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace("&", "").length())

            ## if there are no "&" at all then we have only one key value pair.
            ## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.
            ## the "empty" kv pair to the right of the ampersand will be ignored anyway.
            #if ($countAmpersands == 0)
             #set($rawPostData = $rawAPIData + "&")
            #end

            ## now we tokenise using the ampersand(s)
            #set($tokenisedAmpersand = $rawAPIData.split("&"))

            ## we set up a variable to hold the valid key value pairs
            #set($tokenisedEquals = [])

            ## now we set up a loop to find the valid key value pairs, which must contain only one "="
            #foreach( $kvPair in $tokenisedAmpersand )
             #set($countEquals = $kvPair.length() - $kvPair.replace("=", "").length())
             #if ($countEquals == 1)
              #set($kvTokenised = $kvPair.split("="))
              #if ($kvTokenised[0].length() > 0)
               ## we found a valid key value pair. add it to the list.
               #set($devNull = $tokenisedEquals.add($kvPair))
              #end
             #end
            #end

            ## next we set up our loop inside the output structure "{" and "}"
            {
            #foreach( $kvPair in $tokenisedEquals )
              ## finally we output the JSON for this pair and append a comma if this isn''t the last pair
              #set($kvTokenised = $kvPair.split("="))
             "$util.urlDecode($kvTokenised[0])" : #if($kvTokenised[1].length() > 0)"$util.urlDecode($kvTokenised[1])"#{else}""#end#if( $foreach.hasNext),#end
            #end
            }
        Type: AWS
        Uri: !Join ['/', [!Join [':', ['arn', 'aws', 'apigateway', !Ref 'AWS::Region', 'lambda', 'path']], '2015-03-31', 'functions', !GetAtt RandomCatLambda.Arn, 'invocations']]
      MethodResponses:
        - StatusCode: '200'
      ResourceId: !Ref Cat
      RestApiId: !Ref CatAPI
    Type: AWS::ApiGateway::Method
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: RandomCatLambdaIAMRole
    Type: AWS::IAM::Role
  LambdaInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RandomCatLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ['/', [!Join [":", ['arn', 'aws', 'execute-api', !Ref 'AWS::Region', !Ref 'AWS::AccountId', !Ref CatAPI]], '*']]
    Type: AWS::Lambda::Permission
  RandomCatLambda:
    Properties:
      Code:
        ZipFile: |
          from urllib2 import urlopen
          import xml.etree.ElementTree as ET

          def handler(event, context):
              r = urlopen('http://thecatapi.com/api/images/get?format=xml&results_per_page=1')
              root = ET.fromstring(r.read())
              url = root.find('.//url').text
              return {'text': url}
      Description: Use thecatapi.com to get url of a random cat
      FunctionName: GetRandomCat
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '1'
    Type: AWS::Lambda::Function
