{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Api for finding url of random internet cat",
    "Resources": {
	"LambdaExecutionRole": {
	    "Type": "AWS::IAM::Role",
	    "Properties": {
		"RoleName": "RandomCatLambdaIAMRole",
		"AssumeRolePolicyDocument": {
		    "Version": "2012-10-17",
		    "Statement": [{
			"Effect": "Allow",
			"Principal": { "Service": ["lambda.amazonaws.com"] },
			"Action": ["sts:AssumeRole"]
		    }]
		},
		"ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
	    }
	},
	"RandomCatLambda": {
	    "Type": "AWS::Lambda::Function",
	    "Properties": {
		"FunctionName": "GetRandomCat",
		"Description": "Use thecatapi.com to get url of a random cat",
		"Handler": "index.handler",
		"Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
		"Code": { "ZipFile": { "Fn::Join" : ["\n", [
		    "from urllib2 import urlopen",
		    "import xml.etree.ElementTree as ET",
		    "",
		    "def handler(event, context):",
		    "    r = urlopen('http://thecatapi.com/api/images/get?format=xml&results_per_page=1')",
		    "    root = ET.fromstring(r.read())",
		    "    url = root.find('.//url').text",
                    "    return {'text': url}"
		]]}},
		"Runtime": "python2.7",
		"Timeout": "1"
	    }
	},
	"CatAPI": {
	    "Type": "AWS::ApiGateway::RestApi",
	    "Properties": {
		"Description": "API for finding random internet cats",
		"Name": "CatAPI"
	    }
	},
	"Cat": {
	    "Type": "AWS::ApiGateway::Resource",
	    "Properties": {
		"RestApiId": { "Ref": "CatAPI" },
		"ParentId": { "Fn::GetAtt": ["CatAPI", "RootResourceId"] },
		"PathPart": "cat"
	    }
	},
	"LambdaInvokePermission": {
	    "Type": "AWS::Lambda::Permission",
	    "Properties": {
		"FunctionName" : { "Fn::GetAtt" : ["RandomCatLambda", "Arn"] },
		"Action": "lambda:InvokeFunction",
		"Principal": "apigateway.amazonaws.com",
		"SourceArn": {"Fn::Join" : ["", [
		    "arn:aws:execute-api:",
		    {"Ref": "AWS::Region"},
		    ":",
		    {"Ref": "AWS::AccountId"},
		    ":",
		    {"Ref": "CatAPI"},
		    "/*"
		]]}
	    }
	},
	"GetRandomCat": {
	    "DependsOn": "LambdaInvokePermission",
	    "Type": "AWS::ApiGateway::Method",
	    "Properties": {
		"RestApiId": { "Ref": "CatAPI" },
		"ResourceId": { "Ref": "Cat" },
		"HttpMethod": "POST",
		"AuthorizationType": "NONE",
		"Integration": {
		    "Type": "AWS",
		    "IntegrationHttpMethod": "POST",
		    "PassthroughBehavior": "WHEN_NO_MATCH",
		    "IntegrationResponses": [
			{
			    "ResponseTemplates": {
				"application/json": ""
			    },
			    "StatusCode": "200"
			}
		    ],
		    "Uri": {"Fn::Join" : ["", [
			"arn:aws:apigateway:",
			{"Ref": "AWS::Region"},
			":lambda:path/2015-03-31/functions/",
			{"Fn::GetAtt": ["RandomCatLambda", "Arn"]},
			"/invocations"
		    ]]},
		    "RequestTemplates": {
			"application/x-www-form-urlencoded": { "Fn::Join" : ["\n", [
			    "## convert HTML POST data or HTTP GET query string to JSON",
			    " ",
			    "## get the raw post data from the AWS built-in variable and give it a nicer name",
			    "#if ($context.httpMethod == \"POST\")",
			    " #set($rawAPIData = $input.path('$'))",
			    "#elseif ($context.httpMethod == \"GET\")",
			    " #set($rawAPIData = $input.params().querystring)",
			    " #set($rawAPIData = $rawAPIData.toString())",
			    " #set($rawAPIDataLength = $rawAPIData.length() - 1)",
			    " #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))",
			    " #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))",
			    "#else",
			    " #set($rawAPIData = \"\")",
			    "#end",
			    " ",
			    "## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair",
			    "#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())",
			    " ",
			    "## if there are no \"&\" at all then we have only one key value pair.",
			    "## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.",
			    "## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.",
			    "#if ($countAmpersands == 0)",
			    " #set($rawPostData = $rawAPIData + \"&\")",
			    "#end",
			    " ",
			    "## now we tokenise using the ampersand(s)",
			    "#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))",
			    " ",
			    "## we set up a variable to hold the valid key value pairs",
			    "#set($tokenisedEquals = [])",
			    " ",
			    "## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"",
			    "#foreach( $kvPair in $tokenisedAmpersand )",
			    " #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())",
			    " #if ($countEquals == 1)",
			    "  #set($kvTokenised = $kvPair.split(\"=\"))",
			    "  #if ($kvTokenised[0].length() > 0)",
			    "   ## we found a valid key value pair. add it to the list.",
			    "   #set($devNull = $tokenisedEquals.add($kvPair))",
			    "  #end",
			    " #end",
			    "#end",
			    " ",
			    "## next we set up our loop inside the output structure \"{\" and \"}\"",
			    "{",
			    "#foreach( $kvPair in $tokenisedEquals )",
			    "  ## finally we output the JSON for this pair and append a comma if this isn't the last pair",
			    "  #set($kvTokenised = $kvPair.split(\"=\"))",
			    " \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised[1].length() > 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end",
			    "#end",
			    "}"
			]]}}
		},
		"MethodResponses": [
		    {
			"StatusCode": "200"
		    }
		]
	    }
	},
	"ApiGatewayCloudWatchLogsRole": {
	    "Type": "AWS::IAM::Role",
	    "Properties": {
		"RoleName": "GatewayCloudWatchRole",
		"AssumeRolePolicyDocument": {
		    "Version": "2012-10-17",
		    "Statement": [{
			"Effect": "Allow",
			"Principal": { "Service": ["apigateway.amazonaws.com"] },
			"Action": ["sts:AssumeRole"]
		    }]
		},
		"Policies": [{
		    "PolicyName": "ApiGatewayLogsPolicy",
		    "PolicyDocument": {
			"Version": "2012-10-17",
			"Statement": [{
			    "Effect": "Allow",
			    "Action": [
				"logs:CreateLogGroup",
				"logs:CreateLogStream",
				"logs:DescribeLogGroups",
				"logs:DescribeLogStreams",
				"logs:PutLogEvents",
				"logs:GetLogEvents",
				"logs:FilterLogEvents"
			    ],
			    "Resource": "*"
			}]
		    }
		}]
	    }
	},
	"ApiGatewayAccount": {
	    "Type": "AWS::ApiGateway::Account",
	    "Properties": {
		"CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
	    }
	},
	"ApiDeployment": {
	    "Type": "AWS::ApiGateway::Deployment",
	    "DependsOn": ["GetRandomCat"],
	    "Properties": {
		"RestApiId": {"Ref": "CatAPI"},
		"StageName": "PROD"
	    }
	}
    },
    "Outputs": {
	"RootUrl": {
	    "Description": "Root URL of the API gateway",
	    "Value": {"Fn::Join": ["", ["https://", {"Ref": "CatAPI"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com/PROD/cat"]]}
	}
    }
}
